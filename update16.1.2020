		Abstract class

from abc import ABC, abstractmethod 
class Animal(ABC): 
  
    def move(self): 
        pass
  
class Human(Animal): 
  
    def move(self): 
        print("I can walk and run") 
  
class Snake(Animal): 
  
    def move(self): 
        print("I can crawl") 
  
class Dog(Animal): 
  
    def move(self): 
        print("I can bark") 
  
class Lion(Animal): 
  
    def move(self): 
        print("I can roar") 
          
# Driver code 
R = Human() 
R.move() 
  
K = Snake() 
K.move() 
  
R = Dog() 
R.move() 
  
K = Lion() 
K.move() 
============================================================================================================================================
##Function on another function:

def plus_one(number):
    return number + 1

add_one = plus_one
add_one(5)


def plus_one(number):
    def add_one(number):
        return number + 1

def print_message(message):
    "Enclosong Function"
    def message_sender():
        "Nested Function"
        print(message)

    message_sender()

print_message("Some random message")
    result = add_one(number)
    return result
plus_one(4)

##passing function as an argument to another function:
def plus_one(number):
    return number + 1

def function_call(function):
    number_to_add = 5
    return function(number_to_add)

function_call(plus_one)

####
def print_message(message):
    "Enclosong Function"
    def message_sender():
        "Nested Function"
        print(message)

    message_sender()

print_message("Some random message")


##decorator
def uppercase_decorator(function):
    def wrapper():
        func = function()
        make_uppercase = func.upper()
        return make_uppercase

    return wrapper
def say_hi():
    return 'hello there'

decorate = uppercase_decorator(say_hi)
decorate()
==========================================================================================================================================
### Protected
# Creating a base class 
class Base: 
    def __init__(self): 
          
        # Protected member 
        self._a = 2
  
# Creating a derived class     
class Derived(Base): 
    def __init__(self): 
          
        # Calling constructor of 
        # Base class 
        Base.__init__(self)  
        print("Calling protected member of base class: ") 
        print(self._a) 
          
obj1 = Base() 
  
# Calling protected member 
# Outside class will  result in  
# AttributeError 
print(obj1._a) 
  
obj2 = Derived() 
print(obj1._a) 
============================================================================================================================================
##ordered dic
from collections import OrderedDict
print("\nThis is an Ordered Dict:\n") 
od = OrderedDict() 
od['a'] = 1
od['1'] = 2
od['c'] = 3
od['dog'] = 4
  
for key, value in od.items(): 
    print(key, value) 
=========================================================================================================================================

